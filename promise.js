async function getUserGithub(user) {
  try {
    const result = await fetch(`https://api.github.com/users/${user}`);
    console.log(
      "ðŸš€ ~ file: promise.js:5 ~ getUserGithub ~ result:",
      await result.json()
    );
  } catch (error) {
    console.log("ðŸš€ ~ file: promise.js:6 ~ getUserGithub ~ error:", error);
  }
}

getUserGithub("ro6son");

// async function getUserGithub(user) {
//     try {
//       const result = await fetch(`https://api.github.com/users/${user}`);
//       const resultJson = await result.json();
//       console.log("ðŸš€ ~ file: promise.js:19 ~ getUserGithub ~ resultJson:",
//       resultJson.name)

//     } catch (error) {
//       console.log("ðŸš€ ~ file: promise.js:6 ~ getUserGithub ~ error:", error);
//     }
//   }

//   getUserGithub("ro6son");

/**
 * then: O mÃ©todo then() Ã© usado para lidar com o resultado ou valor retornado por uma Promise quando ela Ã© resolvida (fulfilled). 
 * Ele Ã© chamado quando a Promise Ã© bem-sucedida e recebe duas funÃ§Ãµes de retorno: uma para lidar com o resultado (valor resolvido) 
 * e outra para lidar com possÃ­veis erros (rejeiÃ§Ã£o).
 * catch: O mÃ©todo catch() Ã© usado para lidar com a rejeiÃ§Ã£o de uma Promise, ou seja, quando ela falha. Se houver um erro em qualquer
 *  ponto da cadeia de Promises, o controle serÃ¡ transferido para o bloco catch() mais prÃ³ximo. Ele recebe uma funÃ§Ã£o de retorno que 
 * lida com o erro.
    finally: O mÃ©todo finally() Ã© usado para definir uma aÃ§Ã£o que deve ser executada independentemente de a Promise ser resolvida 
    ou rejeitada. Ã‰ geralmente utilizado para executar cÃ³digo de limpeza ou finalizaÃ§Ã£o. Esse bloco serÃ¡ executado sempre, 
    independentemente do resultado da Promise.
    Nota: O async/await nÃ£o substitui as Promises, mas Ã© uma forma de trabalhar com elas de maneira mais sÃ­ncrona e com uma 
    sintaxe mais limpa.
Exemplo:
 */

// function getUserGithub(user) {
//     fetch(`https://api.github.com/users/${user}`)
//       .then(result => result.json())
//       .then(resultJson => {
//         console.log("ðŸš€ ~ file: promise.js:19 ~ getUserGithub ~ resultJson:", resultJson);
//       })
//       .catch(error => {
//         console.log("ðŸš€ ~ file: promise.js:6 ~ getUserGithub ~ error:", error);
//       })
//       .finally(() => {
//         console.log("Promise acessada com sucesso!");
//       });
//   }

//   getUserGithub("ro6son");
